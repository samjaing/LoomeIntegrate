{
  "ProjectId": 17,
  "ProjectName": "Integration Test",
  "JobName": "03b. Reconcile Result - Snowflake",
  "Logging": 0,
  "LogBatchSize": 5,
  "CancelJobFlag": false,
  "LoggingType": null,
  "Tasks": [
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "TaskContent": "CREATE SCHEMA IF NOT EXISTS \"TCDTgt\";\r\nDROP TABLE IF EXISTS \"TCDTgt\".\"DT1_TCD_ALLNUMBERTYPES_METADATA\";\r\nDROP TABLE IF EXISTS \"TCDTgt\".\"DT2_TCD_ALLDATETIMETYPES_METADATA\";\r\nDROP TABLE IF EXISTS \"TCDTgt\".\"DT3_TCD_ALLOTHERTYPES_METADATA\";\r\n\r\n\r\nCREATE OR REPLACE TRANSIENT TABLE \"TCDTgt\".DT1_TCD_ALLNUMBERTYPES_METADATA\r\nAS\r\nSELECT TABLE_SCHEMA AS SchemaName\r\n\t,TABLE_NAME AS TableName\r\n\t,COLUMN_NAME AS ColumnName\r\n\t,CASE WHEN DATA_TYPE = 'TEXT' THEN 'VARCHAR' ELSE DATA_TYPE END\r\n\t\t|| CASE WHEN DATA_TYPE IN ('TEXT') THEN '(' || TO_VARCHAR(CHARACTER_MAXIMUM_LENGTH) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('NUMBER') THEN '(' || TO_VARCHAR(NUMERIC_PRECISION) || ',' || TO_VARCHAR(NUMERIC_SCALE) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('TIME','TIMESTAMP_NTZ','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_LTZ') THEN '(' || TO_VARCHAR(DATETIME_PRECISION) || ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = 'TCDTgt'\r\nAND TABLE_NAME = 'DT1_TCD_ALLNUMBERTYPES'\r\nAND COLUMN_NAME NOT IN ('CODE','NAME','TASKEXECUTIONID','LOADDATETIME');\r\n\r\nCREATE OR REPLACE TRANSIENT TABLE \"TCDTgt\".DT2_TCD_ALLDATETIMETYPES_METADATA\r\nAS\r\nSELECT TABLE_SCHEMA AS SchemaName\r\n\t,TABLE_NAME AS TableName\r\n\t,COLUMN_NAME AS ColumnName\r\n\t,CASE WHEN DATA_TYPE = 'TEXT' THEN 'VARCHAR' ELSE DATA_TYPE END\r\n\t\t|| CASE WHEN DATA_TYPE IN ('TEXT') THEN '(' || TO_VARCHAR(CHARACTER_MAXIMUM_LENGTH) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('NUMBER') THEN '(' || TO_VARCHAR(NUMERIC_PRECISION) || ',' || TO_VARCHAR(NUMERIC_SCALE) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('TIME','TIMESTAMP_NTZ','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_LTZ') THEN '(' || TO_VARCHAR(DATETIME_PRECISION) || ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = 'TCDTgt'\r\nAND TABLE_NAME = 'DT2_TCD_ALLDATETIMETYPES'\r\nAND COLUMN_NAME NOT IN ('CODE','NAME','TASKEXECUTIONID','LOADDATETIME');\r\n\r\nCREATE OR REPLACE TRANSIENT TABLE \"TCDTgt\".DT3_TCD_ALLOTHERTYPES_METADATA\r\nAS\r\nSELECT TABLE_SCHEMA AS SchemaName\r\n\t,TABLE_NAME AS TableName\r\n\t,COLUMN_NAME AS ColumnName\r\n\t,CASE WHEN DATA_TYPE = 'TEXT' THEN 'VARCHAR' ELSE DATA_TYPE END\r\n\t\t|| CASE WHEN DATA_TYPE IN ('TEXT') THEN '(' || TO_VARCHAR(CHARACTER_MAXIMUM_LENGTH) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('NUMBER') THEN '(' || TO_VARCHAR(NUMERIC_PRECISION) || ',' || TO_VARCHAR(NUMERIC_SCALE) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('TIME','TIMESTAMP_NTZ','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_LTZ') THEN '(' || TO_VARCHAR(DATETIME_PRECISION) || ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = 'TCDTgt'\r\nAND TABLE_NAME = 'DT3_TCD_ALLOTHERTYPES'\r\nAND COLUMN_NAME NOT IN ('CODE','NAME','TASKEXECUTIONID','LOADDATETIME');\r\n",
      "TaskName": "DT - Obtain Metadata for Transformed Case Data - Snowflake",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "SQL Statement",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "Snowflake Target",
      "TargetConnectionName": null,
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "TaskContent": "CREATE SCHEMA IF NOT EXISTS \"ERTgt\";\r\nDROP TABLE IF EXISTS \"ERTgt\".\"DT1_ER_ALLNUMBERTYPES_METADATA\";\r\nDROP TABLE IF EXISTS \"ERTgt\".\"DT2_ER_ALLDATETIMETYPES_METADATA\";\r\nDROP TABLE IF EXISTS \"ERTgt\".\"DT3_ER_ALLOTHERTYPES_METADATA\";\r\n\r\n\r\nCREATE OR REPLACE TRANSIENT TABLE \"ERTgt\".DT1_ER_ALLNUMBERTYPES_METADATA\r\nAS\r\nSELECT TABLE_SCHEMA AS SchemaName\r\n\t,TABLE_NAME AS TableName\r\n\t,COLUMN_NAME AS ColumnName\r\n\t,CASE WHEN DATA_TYPE = 'TEXT' THEN 'VARCHAR' ELSE DATA_TYPE END\r\n\t\t|| CASE WHEN DATA_TYPE IN ('TEXT') THEN '(' || TO_VARCHAR(CHARACTER_MAXIMUM_LENGTH) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('NUMBER') THEN '(' || TO_VARCHAR(NUMERIC_PRECISION) || ',' || TO_VARCHAR(NUMERIC_SCALE) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('TIME','TIMESTAMP_NTZ','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_LTZ') THEN '(' || TO_VARCHAR(DATETIME_PRECISION) || ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = 'ERTgt'\r\nAND TABLE_NAME = 'DT1_ER_ALLNUMBERTYPES'\r\nAND COLUMN_NAME NOT IN ('CODE','NAME','TASKEXECUTIONID','LOADDATETIME');\r\n\r\nCREATE OR REPLACE TRANSIENT TABLE \"ERTgt\".DT2_ER_ALLDATETIMETYPES_METADATA\r\nAS\r\nSELECT TABLE_SCHEMA AS SchemaName\r\n\t,TABLE_NAME AS TableName\r\n\t,COLUMN_NAME AS ColumnName\r\n\t,CASE WHEN DATA_TYPE = 'TEXT' THEN 'VARCHAR' ELSE DATA_TYPE END\r\n\t\t|| CASE WHEN DATA_TYPE IN ('TEXT') THEN '(' || TO_VARCHAR(CHARACTER_MAXIMUM_LENGTH) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('NUMBER') THEN '(' || TO_VARCHAR(NUMERIC_PRECISION) || ',' || TO_VARCHAR(NUMERIC_SCALE) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('TIME','TIMESTAMP_NTZ','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_LTZ') THEN '(' || TO_VARCHAR(DATETIME_PRECISION) || ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = 'ERTgt'\r\nAND TABLE_NAME = 'DT2_ER_ALLDATETIMETYPES'\r\nAND COLUMN_NAME NOT IN ('CODE','NAME','TASKEXECUTIONID','LOADDATETIME');\r\n\r\nCREATE OR REPLACE TRANSIENT TABLE \"ERTgt\".DT3_ER_ALLOTHERTYPES_METADATA\r\nAS\r\nSELECT TABLE_SCHEMA AS SchemaName\r\n\t,TABLE_NAME AS TableName\r\n\t,COLUMN_NAME AS ColumnName\r\n\t,CASE WHEN DATA_TYPE = 'TEXT' THEN 'VARCHAR' ELSE DATA_TYPE END\r\n\t\t|| CASE WHEN DATA_TYPE IN ('TEXT') THEN '(' || TO_VARCHAR(CHARACTER_MAXIMUM_LENGTH) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('NUMBER') THEN '(' || TO_VARCHAR(NUMERIC_PRECISION) || ',' || TO_VARCHAR(NUMERIC_SCALE) || ')'\r\n\t\t\tWHEN DATA_TYPE IN ('TIME','TIMESTAMP_NTZ','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_LTZ') THEN '(' || TO_VARCHAR(DATETIME_PRECISION) || ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = 'ERTgt'\r\nAND TABLE_NAME = 'DT3_ER_ALLOTHERTYPES'\r\nAND COLUMN_NAME NOT IN ('CODE','NAME','TASKEXECUTIONID','LOADDATETIME');\r\n",
      "TaskName": "DT - Obtain Metadata for Expected Results - Snowflake",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "SQL Statement",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "Snowflake Target",
      "TargetConnectionName": null,
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"DT\"\r\n$TestCases = @(\"1\", \"2\", \"3\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TestDataSet = switch ($TestCaseID) {\r\n        \"DT1\" {\"ALLNUMBERTYPES\"}\r\n        \"DT2\" {\"ALLDATETIMETYPES\"}\r\n        \"DT3\" {\"ALLOTHERTYPES\"}\r\n    }\r\n    $TCDTableName = $TestCaseID + \"_TCD_\" + $TestDataSet;\r\n    $TCDTable = '\"TCDTgt\".\"' + $TCDTableName + '\"';\r\n    $ERTable = '\"ERTgt\".\"' + $TCDTableName.Replace('_TCD_', '_ER_') + '\"';\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = switch ($TestCaseID)\r\n        {\r\n            \"DT1\" {\"COLBIT,COLTINYINT,COLSMALLINT,COLINT,COLBIGINT,COLSMALLMONEY,COLMONEY,COLDECIMAL,COLNUMERIC,COLFLOAT,COLREAL\"}\r\n            \"DT2\" {\"COLDATE,COLTIME,COLSMALLDATETIME,COLDATETIME,COLDATETIME2,COLDATETIMEOFFSET\"}  #coltimestamp is automatically generated value, will not expect it to be matched\r\n            \"DT3\" {\"COLCHAR,COLNCHAR,COLVARCHAR,COLNVARCHAR,COLBINARY,COLVARBINARY,COLGUID,COLSQL_VARIANT,COLSYSNAME,COLHIERARCHYID\"}  #coltext,colntext,colimage,colgeography,colgeometry,colxml are not compatible with EXCEPT and = operator, cannot be compared\r\n        };\r\n    $ColumnNumber = switch ($TestCaseID)\r\n        {\r\n            \"DT1\" {11}\r\n            \"DT2\" {7}\r\n            \"DT3\" {16}\r\n        };\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        $MetadataTableName = $TCDTableName + \"_METADATA\";\r\n        $ERMetadataTable = '\"TCDTgt\".\"' + $MetadataTableName + '\"';\r\n        $TCDMetadataTable = '\"ERTgt\".\"' + $MetadataTableName.Replace('_TCD_', '_ER_') + '\"';\r\n\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT SUM(CASE WHEN er.DataType = tcd.DataType THEN 0 ELSE 1 END) AS COLUMNVARIANCECOUNT FROM $ERMetadataTable er FULL JOIN $TCDMetadataTable tcd ON er.ColumnName = tcd.ColumnName\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        $ColumnReader.Read() | Out-Null;\r\n        $ColumnVarianceCount = $ColumnReader[\"COLUMNVARIANCECOUNT\"]\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVarianceCount -ne 0) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        } \r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "DT - Reconcile with Expected Results - Snowflake",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "Snowflake Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"SS\"\r\n$TestDataSet = \"Account\"\r\n$TestCases = @(\"1\", \"2\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            default {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName.ToUpper() + '\"'}\r\n            default {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {'\"ERTgt\".\"SS_ER_' + $TestDataSet.ToUpper() + '\"'}\r\n            default {\"[ERTgt].[SS_ER_$TestDataSet]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = \"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\";\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n            default {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n        }\r\n    $ColumnNumber = 6\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n        \r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\";\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = $ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\");\r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the tranformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "SS - Reconcile With Expected Results - Snowflake",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "Snowflake Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    }
  ],
  "JobSequences": [
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "RunSequence": 1,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "DT - Obtain Metadata for Transformed Case Data - Snowflake",
      "Connection": null
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "RunSequence": 2,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "DT - Obtain Metadata for Expected Results - Snowflake",
      "Connection": null
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "RunSequence": 3,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "DT - Reconcile with Expected Results - Snowflake",
      "Connection": null
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "RunSequence": 4,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "SS - Reconcile With Expected Results - Snowflake",
      "Connection": null
    }
  ],
  "JobSequenceDependencies": [
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "ProjectName": "Integration Test",
      "TaskName": "DT - Reconcile with Expected Results - Snowflake",
      "TaskRunSequence": 3,
      "PredecessorTaskName": "DT - Obtain Metadata for Expected Results - Snowflake",
      "PredecessorTaskRunSequence": 2
    },
    {
      "JobName": "03b. Reconcile Result - Snowflake",
      "ProjectName": "Integration Test",
      "TaskName": "DT - Reconcile with Expected Results - Snowflake",
      "TaskRunSequence": 3,
      "PredecessorTaskName": "DT - Obtain Metadata for Transformed Case Data - Snowflake",
      "PredecessorTaskRunSequence": 1
    }
  ],
  "JobDependencies": []
}