{
  "ProjectId": 8,
  "ProjectName": "Integration Test",
  "JobName": "13. Reconcile Script Test Result",
  "Logging": 0,
  "LogBatchSize": 5,
  "CancelJobFlag": false,
  "LoggingType": null,
  "Tasks": [
    {
      "JobName": "13. Reconcile Script Test Result",
      "TaskContent": "# Setup the storage location environment variables, should be modified based on the scenarios\r\n$TargetPath = \"\\\\PERPRD-WEB01\\IntegrateTesting\\Target\";\r\n\r\n$TestScenario = \"PSC\";\r\n$TestCases = @(\"1\", \"2\", \"3\");\r\n$TestDataSet = \"Account\";\r\n\r\n# Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\nForeach ($TestCase in $TestCases)\r\n{\r\n    $TestCaseID = $TestScenario + $TestCase;\r\n    $FileExtension = \"csv\";\r\n    $TCDFileName = $TestCaseID + \"_TCD_\" + $TestDataSet + \".\" + $FileExtension;\r\n    $DifferenceFile = $TargetPath + \"\\\" + $TCDFileName;\r\n    $ReferenceFile = $TargetPath + \"\\\" + \"mdm.\" + $TestScenario + \"_ER_\" + $TestDataSet + \".csv\";\r\n\r\n    $Delimiter = \",\";\r\n\r\n    # Check TCD file existence\r\n    $FileExists = Test-Path -Path $DifferenceFile;\r\n\r\n    # Generate error message if file not exist\r\n    If ($FileExists -ne $True) {\r\n        $ErrorDesc = \"Cannot find file \" + $TCDFileName + \", please check task and / or file definition configures.\";\r\n        $ActualResult = 1;\r\n    } else {\r\n        # Compare transformed file with reference file (the expected result)\r\n        $VarianceCheck = Compare-Object -Property AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType -ReferenceObject $(Import-Csv $ReferenceFile) -DifferenceObject $(Import-Csv $DifferenceFile);\r\n\r\n        # Generate error message is found any variance, otherwise set error message to blank\r\n        If ($VarianceCheck.Count -ne 0) {\r\n            $ErrorDesc = \"Found variance on data compare to the Expected Result data set.\";\r\n            $ActualResult = 1;\r\n        } else {\r\n            $ErrorDesc = \"\";\r\n            $ActualResult = 0;\r\n        }\r\n    }\r\n\r\n    # Obtain expected results reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n    \r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n    \r\n    $ResultReader.Close();\r\n\r\n    # Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\"\r\n    } else {\r\n        $TestResult = \"Fail\"\r\n    };\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}",
      "TaskName": "PSC - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "13. Reconcile Script Test Result",
      "TaskContent": "# Setup the storage location environment variables, should be modified based on the scenarios\r\n$TargetPath = \"\\\\PERPRD-WEB01\\IntegrateTesting\\Target\";\r\n\r\n$TestScenario = \"PS\";\r\n$TestCases = @(\"1\", \"2\", \"3\");\r\n$TestDataSet = \"Account\";\r\n\r\n# Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\nForeach ($TestCase in $TestCases)\r\n{\r\n    $TestCaseID = $TestScenario + $TestCase;\r\n    $FileExtension = \"csv\";\r\n    $TCDFileName = $TestCaseID + \"_TCD_\" + $TestDataSet + \".\" + $FileExtension;\r\n    $DifferenceFile = $TargetPath + \"\\\" + $TCDFileName;\r\n    $ReferenceFile = $TargetPath + \"\\\" + \"mdm.\" + $TestScenario + \"_ER_\" + $TestDataSet + \".csv\";\r\n\r\n    $Delimiter = \",\";\r\n\r\n    # Check TCD file existence\r\n    $FileExists = Test-Path -Path $DifferenceFile;\r\n\r\n    # Generate error message if file not exist\r\n    If ($FileExists -ne $True) {\r\n        $ErrorDesc = \"Cannot find file \" + $TCDFileName + \", please check task and / or file definition configures.\";\r\n        $ActualResult = 1;\r\n    } else {\r\n        # Compare transformed file with reference file (the expected result)\r\n        $VarianceCheck = Compare-Object -Property AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType -ReferenceObject $(Import-Csv $ReferenceFile) -DifferenceObject $(Import-Csv $DifferenceFile);\r\n\r\n        # Generate error message is found any variance, otherwise set error message to blank\r\n        If ($VarianceCheck.Count -ne 0) {\r\n            $ErrorDesc = \"Found variance on data compare to the Expected Result data set.\";\r\n            $ActualResult = 1;\r\n        } else {\r\n            $ErrorDesc = \"\";\r\n            $ActualResult = 0;\r\n        }\r\n    }\r\n\r\n    # Obtain expected results reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n    \r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n    \r\n    $ResultReader.Close();\r\n\r\n    # Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\"\r\n    } else {\r\n        $TestResult = \"Fail\"\r\n    };\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}",
      "TaskName": "PS - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "13. Reconcile Script Test Result",
      "TaskContent": "# Setup the storage location environment variables, should be modified based on the scenarios\r\n$TargetPath = \"\\\\PERPRD-WEB01\\IntegrateTesting\\Target\";\r\n\r\n$TestScenario = \"PY\";\r\n$TestCases = @(\"1\", \"2\", \"3\");\r\n$TestDataSet = \"Account\";\r\n\r\n# Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\nForeach ($TestCase in $TestCases)\r\n{\r\n    $TestCaseID = $TestScenario + $TestCase;\r\n    $FileExtension = \"csv\";\r\n    $TCDFileName = $TestCaseID + \"_TCD_\" + $TestDataSet + \".\" + $FileExtension;\r\n    $DifferenceFile = $TargetPath + \"\\\" + $TCDFileName;\r\n    $ReferenceFile = $TargetPath + \"\\\" + \"mdm.\" + $TestScenario + \"_ER_\" + $TestDataSet + \".csv\";\r\n\r\n    $Delimiter = \",\";\r\n\r\n    # Check TCD file existence\r\n    $FileExists = Test-Path -Path $DifferenceFile;\r\n\r\n    # Generate error message if file not exist\r\n    If ($FileExists -ne $True) {\r\n        $ErrorDesc = \"Cannot find file \" + $TCDFileName + \", please check task and / or file definition configures.\";\r\n        $ActualResult = 1;\r\n    } else {\r\n        # Compare transformed file with reference file (the expected result)\r\n        $VarianceCheck = Compare-Object -Property AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType -ReferenceObject $(Import-Csv $ReferenceFile) -DifferenceObject $(Import-Csv $DifferenceFile);\r\n\r\n        # Generate error message is found any variance, otherwise set error message to blank\r\n        If ($VarianceCheck.Count -ne 0) {\r\n            $ErrorDesc = \"Found variance on data compare to the Expected Result data set.\";\r\n            $ActualResult = 1;\r\n        } else {\r\n            $ErrorDesc = \"\";\r\n            $ActualResult = 0;\r\n        }\r\n    }\r\n\r\n    # Obtain expected results reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n    \r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n    \r\n    $ResultReader.Close();\r\n\r\n    # Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\"\r\n    } else {\r\n        $TestResult = \"Fail\"\r\n    };\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}",
      "TaskName": "PY - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": null,
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "13. Reconcile Script Test Result",
      "TaskContent": "# Setup the storage location environment variables, should be modified based on the scenarios\r\n$TargetPath = \"\\\\PERPRD-WEB01\\IntegrateTesting\\Target\";\r\n\r\n$TestScenario = \"OS\";\r\n$TestCases = @(\"1\", \"2\", \"3\");\r\n$TestDataSet = \"Combined\";\r\n\r\n# Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\nForeach ($TestCase in $TestCases)\r\n{\r\n    $TestCaseID = $TestScenario + $TestCase;\r\n    $FileExtension = \"csv\";\r\n    $TCDFileName = $TestCaseID + \"_TCD_\" + $TestDataSet + \".\" + $FileExtension;\r\n    $DifferenceFile = $TargetPath + \"\\\" + $TCDFileName;\r\n    $ReferenceFile = $TargetPath + \"\\\" + \"mdm.\" + $TestScenario + \"_ER_\" + $TestDataSet + \".csv\";\r\n\r\n    $Delimiter = \",\";\r\n\r\n    # Check TCD file existence\r\n    $FileExists = Test-Path -Path $DifferenceFile;\r\n\r\n    # Generate error message if file not exist\r\n    If ($FileExists -ne $True) {\r\n        $ErrorDesc = \"Cannot find file \" + $TCDFileName + \", please check task and / or file definition configures.\";\r\n        $ActualResult = 1;\r\n    } else {\r\n        # Compare transformed file with reference file (the expected result)\r\n        $VarianceCheck = Compare-Object -Property OrderID,OrderDetailID,ProductID,OrderQty,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag -ReferenceObject $(Import-Csv $ReferenceFile) -DifferenceObject $(Import-Csv $DifferenceFile);\r\n\r\n        # Generate error message is found any variance, otherwise set error message to blank\r\n        If ($VarianceCheck.Count -ne 0) {\r\n            $ErrorDesc = \"Found variance on data compare to the Expected Result data set.\";\r\n            $ActualResult = 1;\r\n        } else {\r\n            $ErrorDesc = \"\";\r\n            $ActualResult = 0;\r\n        }\r\n    }\r\n\r\n    # Obtain expected results reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n    \r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n    \r\n    $ResultReader.Close();\r\n\r\n    # Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\"\r\n    } else {\r\n        $TestResult = \"Fail\"\r\n    };\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}",
      "TaskName": "OS - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": null,
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    }
  ],
  "JobSequences": [
    {
      "JobName": "13. Reconcile Script Test Result",
      "RunSequence": 1,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "PSC - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "13. Reconcile Script Test Result",
      "RunSequence": 2,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "PS - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "13. Reconcile Script Test Result",
      "RunSequence": 3,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "PY - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "13. Reconcile Script Test Result",
      "RunSequence": 4,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "OS - Reconcile with Expected Results",
      "Connection": null
    }
  ],
  "JobSequenceDependencies": [],
  "JobDependencies": []
}