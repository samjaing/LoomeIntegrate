{
  "ProjectId": 8,
  "ProjectName": "Integration Test",
  "JobName": "03. Reconcile Result - Generic",
  "Logging": 1,
  "LogBatchSize": 5,
  "CancelJobFlag": false,
  "LoggingType": null,
  "Tasks": [
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"BM\"\r\n$TestDataSet = \"Account\"\r\n$TestCases = @(\"1\", \"2\", \"3\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\r\n                switch ($TestCaseID) {\r\n                    {($_ -eq \"BM1\") -or ($_ -eq \"BM3\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"BM2\" {\"AccountBK,ParentAccountBK\"}\r\n                }\r\n            }\r\n            \"Snowflake\" {\r\n                switch ($TestCaseID){\r\n                    {($_ -eq \"BM1\") -or ($_ -eq \"BM3\")} {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n                    \"BM2\" {\"ACCOUNTBK,PARENTACCOUNTBK\"}\r\n                }\r\n            }\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\r\n                switch ($TestCaseID){\r\n                    {($_ -eq \"BM1\") -or ($_ -eq \"BM3\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"BM2\" {\"AccountBK,ParentAccountBK\"}\r\n                }\r\n            }\r\n        };\r\n    $ColumnNumber =        \r\n        switch ($TestCaseID)\r\n            {\r\n                {($_ -eq \"BM1\") -or ($_ -eq \"BM3\")} {6}\r\n                \"BM2\" {2}\r\n            };\r\n    \r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n    \r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n        };    \r\n        \r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n                switch ($sourceDriverType)\r\n                {\r\n                    \"Microsoft SQL Server\" {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "BM - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"IM\"\r\n$TestDataSet = \"Order\"\r\n$TestCases = @(\"1\", \"2\", \"3\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"OrderID,OrderDetailID,OrderQty,ProductID,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag\"}\r\n            \"Snowflake\" {\"ORDERID,ORDERDETAILID,ORDERQTY,PRODUCTID,UNITPRICE,UNITPRICEDISCOUNT,LINETOTAL,TRANSACTIONDATE,IDENTIFYTAG\"}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"OrderID,OrderDetailID,OrderQty,ProductID,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag\"}\r\n        };\r\n    $ColumnNumber = 9;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n        };    \r\n        \r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n                switch ($sourceDriverType)\r\n                {\r\n                    \"Microsoft SQL Server\" {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "IM - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"AM\"\r\n$TestCase = \"1\"\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n$TestDataSets = switch ($sourceDriverType) {\r\n    \"Microsoft SQL Server\" {@(\"Account\", \"Account_2\", \"Order\")}\r\n    \"Snowflake\" {@(\"ACCOUNT\", \"ACCOUNT_2\", \"ORDER\")}\r\n    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {@(\"Account\", \"Account_2\", \"Order\")}\r\n};\r\n\r\n#Check if expected tables with same naming pattern are picked up and transformed to target\r\n$TestCaseID = $TestCaseGroup + $TestCase;\r\n$Tables = switch ($sourceDriverType) {\r\n    \"Microsoft SQL Server\" {$TestCaseID + \"_Account,\" + $TestCaseID + \"_Account_2,\" + $TestCaseID + \"_Order\"}\r\n    \"Snowflake\" {$TestCaseID + \"_ACCOUNT,\" + $TestCaseID + \"_ACCOUNT_2,\" + $TestCaseID + \"_ORDER\"}\r\n    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_Account,\" + $TestCaseID + \"_Account_2,\" + $TestCaseID + \"_Order\"}\r\n};\r\n\r\n#Default check result variables to 0\r\n$TableCheckResult = 0;\r\n$ColumnCheckResult = 0;\r\n$DataCheckResult = 0;\r\n        \r\n$ReconCheck.CommandText = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME LIKE '\" + $TestCaseID + \"_%'\";\r\n$TableReader = $ReconCheck.ExecuteReader();\r\n\r\n#Will check if all expected tables were migrated and there's no unexpected tables\r\n$TableVariance = \"'\" + ($Tables.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\";\r\n$TableCount = 0;\r\n\r\nWhile ($TableReader.Read()) {\r\n    #Remove from list of expected tables if table is found in the target to check if all expected tables were migrated (targeting empty string in the end)\r\n    $TableVariance = $TableVariance.Replace(\"'\" + $TableReader[\"TABLE_NAME\"] + \"'\", \"\");\r\n    #Count table number to check is there any unexpected table\r\n    $TableCount += 1; \r\n}\r\n\r\n#Tidy up table list and remove delimiter in the string\r\n$TableVariance = $TableVariance.Replace(\",\", \"\");\r\n\r\n$TableReader.Close();\r\n\r\n$ErrorDesc = \"\";\r\n\r\n#If cannot find any of the tables, mark an error with table check\r\nIf ($TableVariance -ne \"\" -or $TableCount -ne 3) {\r\n    $TableCheckResult = 1;\r\n} else {\r\n    #Start to loop through expected test data sets defined previously and check test results\r\n    Foreach ($TestDataSet in $TestDataSets) {\r\n        #Define variables that will used when checking results\r\n        $TCDTableName = \r\n            switch ($sourceDriverType)\r\n            {\r\n                \"Microsoft SQL Server\" {$TestCaseID + \"_\" + $TestDataSet}\r\n                \"Snowflake\" {$TestCaseID + \"_\" + $TestDataSet.ToUpper()}\r\n                {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_\" + $TestDataSet}\r\n            };\r\n        $TCDTable = \r\n            switch ($sourceDriverType)\r\n            {\r\n                \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n                \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n                {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            };\r\n        $ERTable = #\"[ERTgt].[\" + $TestCaseID + \"_ER_\" + $TestDataSet.Replace(\"_2\", \"\") + \"]\"\r\n            switch ($sourceDriverType)\r\n            {\r\n                \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TestCaseID + \"_ER_\" + $TestDataSet.ToUpper().Replace(\"_2\", \"\") + \"]\"}\r\n                \"Snowflake\" {'\"ERTgt\".\"' + $TestCaseID + \"_ER_\" + $TestDataSet.ToUpper().Replace(\"_2\", \"\") + '\"'}\r\n                {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TestCaseID + \"_ER_\" + $TestDataSet.ToUpper().Replace(\"_2\", \"\") + \"]\"}\r\n            };\r\n\r\n        #Define expected columns for each data set\r\n        $Columns = \r\n            switch ($sourceDriverType)\r\n            {\r\n                \"Microsoft SQL Server\" {\r\n                    switch ($TestDataSet){\r\n                        \"Account\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                        \"Account_2\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                        \"Order\" {\"OrderID,OrderDetailID,ProductID,OrderQty,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag\"}\r\n                    };\r\n                }\r\n                \"Snowflake\" {\r\n                    switch ($TestDataSet){\r\n                        \"Account\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n                        \"Account_2\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n                        \"Order\" {\"ORDERID,ORDERDETAILID,PRODUCTID,ORDERQTY,UNITPRICE,UNITPRICEDISCOUNT,LINETOTAL,TRANSACTIONDATE,IDENTIFYTAG\"}\r\n                    };        \r\n                }\r\n                {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\r\n                    switch ($TestDataSet){\r\n                        \"Account\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                        \"Account_2\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                        \"Order\" {\"OrderID,OrderDetailID,ProductID,OrderQty,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag\"}\r\n                    };         \r\n                }\r\n            }\r\n\r\n        $ColumnNumber = switch ($TestDataSet)\r\n        {\r\n            \"Account\" {6}\r\n            \"Account_2\" {6}\r\n            \"Order\" {9}\r\n        };\r\n        \r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\";\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = $ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\");\r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#Return result from above checks\r\n$ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n#Obtain designed result from test case reference\r\n$LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n$ResultReader = $LogOutput.ExecuteReader();\r\n\r\n$ResultReader.Read() | Out-Null;\r\n$DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n$ResultReader.Close();\r\n\r\n#Compare actual result to designed result, output the test result and error description (if any)\r\nIf ($ActualResult -eq $DesignedResult) {\r\n    $TestResult = \"Pass\";\r\n    $ErrorDesc = \"\";\r\n} else {\r\n    $TestResult = \"Fail\";\r\n    $ErrorDesc = switch ($true) {\r\n        {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n        {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n        {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n    };\r\n}\r\n\r\n#Output execution result to log\r\n$ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n$LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n$LogOutput.ExecuteNonQuery();\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "AM - Reconcile Detect Mode Result",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"QM\"\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n$TestCases = switch ($sourceDriverType) {\r\n    \"Microsoft SQL Server\" {@(\"1\", \"2\", \"3\", \"4\")}\r\n    \"Snowflake\" {@(\"1\", \"2\", \"3\")}\r\n}\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TestDataSet = switch ($TestCaseID)\r\n    {\r\n        {($_ -eq \"QM1\") -or ($_ -eq \"QM2\")} {\"Account\"}\r\n        {($_ -eq \"QM3\") -or ($_ -eq \"QM4\")} {\"Order\"}\r\n    };\r\n\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\r\n                switch ($TestCaseID){\r\n                    \"QM1\" {\"ParentAccountBK,ParentAccountDescription,AccountType,Operator,ValueType,AccountLevel\"}\r\n                    \"QM2\" {\"ParentAccountBK,ParentAccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"QM3\" {\"OrderID,LineCount,OrderQtyTotal,OrderTotal,AveragePerUnit,TotalBeforeDiscount\"}\r\n                    \"QM4\" {\"Mth,OrderID,LineCount,OrderTotal,SalesRank\"}\r\n                };\r\n            }\r\n            \"Snowflake\" {\r\n                switch ($TestCaseID){\r\n                    \"QM1\" {\"PARENTACCOUNTBK,PARENTACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE,ACCOUNTLEVEL\"}\r\n                    \"QM2\" {\"PARENTACCOUNTBK,PARENTACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n                    \"QM3\" {\"ORDERID,LINECOUNT,ORDERQTYTOTAL,ORDERTOTAL,AVERAGEPERUNIT,TOTALBEFOREDISCOUNT\"}\r\n                    \"QM4\" {\"MTH,ORDERID,LINECOUNT,ORDERTOTAL,SALESRANK\"}\r\n                };            \r\n            }\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\r\n                switch ($TestCaseID){\r\n                    \"QM1\" {\"ParentAccountBK,ParentAccountDescription,AccountType,Operator,ValueType,AccountLevel\"}\r\n                    \"QM2\" {\"ParentAccountBK,ParentAccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"QM3\" {\"OrderID,LineCount,OrderQtyTotal,OrderTotal,AveragePerUnit,TotalBeforeDiscount\"}\r\n                    \"QM4\" {\"Mth,OrderID,LineCount,OrderTotal,SalesRank\"}\r\n                };            \r\n            }\r\n        }\r\n    $ColumnNumber = switch ($TestCaseID)\r\n        {\r\n            {($_ -eq \"QM1\") -or ($_ -eq \"QM3\")} {6}\r\n            {($_ -eq \"QM2\") -or ($_ -eq \"QM4\")} {5}\r\n        };\r\n    \r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n        };    \r\n        \r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n                switch ($sourceDriverType)\r\n                {\r\n                    \"Microsoft SQL Server\" {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "QM - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"QIM\"\r\n$TestDataSet = \"Order\"\r\n$TestCases = @(\"1\", \"2\", \"3\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"OrderID,OrderDetailID,OrderQty,ProductID,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag\"}\r\n            \"Snowflake\" {\"ORDERID,ORDERDETAILID,ORDERQTY,PRODUCTID,UNITPRICE,UNITPRICEDISCOUNT,LINETOTAL,TRANSACTIONDATE,IDENTIFYTAG\"}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"OrderID,OrderDetailID,OrderQty,ProductID,UnitPrice,UnitPriceDiscount,LineTotal,TransactionDate,IdentifyTag\"}\r\n        }\r\n    $ColumnNumber = 9;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n        \r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\";\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = $ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\");\r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "QIM - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"NS_SS\"\r\n$TestDataSet = \"Account\"\r\n$TestCases = @(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n    \r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns =\r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n            \"Snowflake\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n        };\r\n    $ColumnNumber = 6;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n        \r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n        };    \r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n            switch ($sourceDriverType)\r\n                {\r\n                    \"Microsoft SQL Server\" {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "NS_SS - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"NS_TS\"\r\n$TestDataSet = \"Account\"\r\n$TestCases = @(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDSchema = switch ($TestCaseID) {\r\n        \"NS_TS1\" {\"00TCDTgt\"}\r\n        \"NS_TS2\" {\"TCD Tgt\"}\r\n        \"NS_TS3\" {\"T-CDTgt\"}\r\n        \"NS_TS4\" {\"TCDT_gt\"}\r\n        \"NS_TS5\" {\"TCDTgt!\"}\r\n        \"NS_TS6\" {\"TCDTg`$t\"}\r\n        \"NS_TS7\" {\"TCDTgt#\"}\r\n        \"NS_TS8\" {\"TCD.Tgt\"}\r\n        \"NS_TS9\" {\"TCDT''gt\"}\r\n        \"NS_TS10\" {\"T[CDTgt\"}\r\n        \"NS_TS11\" {\"TCDTg]t\"}\r\n    }\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[\" + ($TCDSchema.Replace(\"''\", \"'\")).Replace(\"]\", \"]]\") + \"].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"' + ($TCDSchema.Replace(\"''\", \"'\")) + '\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[\" + ($TCDSchema.Replace(\"''\", \"'\")).Replace(\"]\", \"]]\") + \"].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns =\r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n            \"Snowflake\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n        };\r\n    $ColumnNumber = 6;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '\" + $TCDSchema + \"' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '\" + $TCDSchema + \"' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n        };\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n            switch ($sourceDriverType)\r\n                {\r\n                    \"Microsoft SQL Server\" {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\t\t\r\n\t\t#Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "NS_TS - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"NS_T\"\r\n$TestCases = @(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TestDataSet = switch ($TestCaseID) {\r\n        \"NS_T1\" {        \r\n            switch ($sourceDriverType)\r\n            {\r\n                \"Snowflake\" {\"0ACCOUNT\"}\r\n                Default {\"0Account\"}\r\n            };\r\n        }\r\n        \"NS_T2\" {\" Account\"}\r\n        \"NS_T3\" {\"-Account\"}\r\n        \"NS_T4\" {        \r\n            switch ($sourceDriverType)\r\n            {\r\n                \"Snowflake\" {\"ACCOUNT\"}\r\n                Default {\"Account\"}\r\n            };\r\n        }\r\n        \"NS_T5\" {\"!Account\"}\r\n        \"NS_T6\" {\"`$Account\"}\r\n        \"NS_T7\" {\"#Account\"}\r\n        \"NS_T8\" {\".Account\"}\r\n        \"NS_T9\" {\"'Account\"}\r\n        \"NS_T10\" {\"[Account\"}\r\n        \"NS_T11\" {\"]Account\"}\r\n    }\r\n    $TCDTableName = $TestCaseID + \"_TCD_\" + $TestDataSet;\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName.Replace(\"]\", \"]]\") + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName.Replace(\"]\", \"]]\") + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"]\", \"]]\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"]\", \"]]\") + \"]\"}\r\n        };\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns =\r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n            \"Snowflake\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n        };\r\n    $ColumnNumber = 6;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n        \r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName.Replace(\"'\", \"''\") + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName.Replace(\"'\", \"''\") + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n        };\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n            switch ($sourceDriverType)\r\n                {\r\n                    \"Microsoft SQL Server\" {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };\r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table for test case $TestCaseID.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "NS_T - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"FM_I\";\r\n$TestCases = @(\"1\", \"2\", \"3\", \"4\");\r\n$TestDataSet = \"Account\";\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\nForeach ($TestCase in $TestCases)\r\n{\r\n\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase; #eg FM_I1\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        }; #eg FM_I1_TCD_Account\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        }; #eg [TCDTgt].[FM_I1_TCD_Account]\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"I1\", \"I\").Replace(\"I2\", \"I\").Replace(\"I3\", \"I\").Replace(\"I4\", \"I\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"I1\", \"I\").Replace(\"I2\", \"I\").Replace(\"I3\", \"I\").Replace(\"I4\", \"I\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"I1\", \"I\").Replace(\"I2\", \"I\").Replace(\"I3\", \"I\").Replace(\"I4\", \"I\") + \"]\"}\r\n        }; #eg [ERTgt].[FM_I_ER_Account]\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test scenarios and cases\r\n    $TCDColumns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\r\n                switch ($TestCaseID) {\r\n                    {($_ -eq \"FM_I1\") -or ($_ -eq \"FM_I2\") -or ($_ -eq \"FM_I3\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"FM_I4\" {\"COL_2,COL_3,COL_4,COL_5,COL_6,COL_7\"}\r\n                }\r\n            }\r\n            \"Snowflake\" {\r\n                switch ($TestCaseID){\r\n                    {($_ -eq \"FM_I1\") -or ($_ -eq \"FM_I2\") -or ($_ -eq \"FM_I3\")} {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n                    \"FM_I4\" {\"COL_2,COL_3,COL_4,COL_5,COL_6,COL_7\"}\r\n                }\r\n            }\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\r\n                switch ($TestCaseID){\r\n                    {($_ -eq \"FM_I1\") -or ($_ -eq \"FM_I2\") -or ($_ -eq \"FM_I3\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"FM_I4\" {\"COL_2,COL_3,COL_4,COL_5,COL_6,COL_7\"}\r\n                }\r\n            }\r\n        };\r\n    $ERColumns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\r\n                switch ($TestCaseID) {\r\n                    {($_ -eq \"FM_I1\") -or ($_ -eq \"FM_I2\") -or ($_ -eq \"FM_I3\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"FM_I4\" {\"ValueType AS COL_2,Operator AS COL_3,AccountType AS COL_4,AccountDescription AS COL_5,ParentAccountBK AS COL_6,AccountBK AS COL_7\"}\r\n                }\r\n            }\r\n            \"Snowflake\" {\r\n                switch ($TestCaseID){\r\n                    {($_ -eq \"FM_I1\") -or ($_ -eq \"FM_I2\") -or ($_ -eq \"FM_I3\")} {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n                    \"FM_I4\" {\"VALUETYPE AS COL_2,OPERATOR AS COL_3,ACCOUNTTYPE AS COL_4,ACCOUNTDESCRIPTION AS COL_5,PARENTACCOUNTBK AS COL_6,ACCOUNTBK AS COL_7\"}\r\n                }\r\n            }\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\r\n                switch ($TestCaseID){\r\n                    {($_ -eq \"FM_I1\") -or ($_ -eq \"FM_I2\") -or ($_ -eq \"FM_I3\")} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n                    \"FM_I4\" {\"ValueType AS COL_2,Operator AS COL_3,AccountType AS COL_4,AccountDescription AS COL_5,ParentAccountBK AS COL_6,AccountBK AS COL_7\"}\r\n                }\r\n            }\r\n        };\r\n    $ColumnNumber = 6;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%' AND UPPER(COLUMN_NAME) NOT IN ('COL_0', 'COL_1'))\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \"'\" + ($TCDColumns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\";\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = $ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\");\r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $ERColumns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $TCDColumns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n    \r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n    \r\n            $ERReconReader.Close();\r\n    \r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $TCDColumns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $ERColumns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n    \r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n    \r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();   \r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "FM_I - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "# Define test case variables\r\n$TestCaseGroup = \"PSTG\";\r\n$TestCases = @(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\");\r\n\r\n# Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n# Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n# Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    $TestDataSet = \r\n        switch($TestCase) {\r\n            {(\"1\",\"2\",\"3\",\"4\",\"9\",\"11\").Contains($_)} {\"Account\"}\r\n            {(\"5\",\"6\",\"7\",\"8\",\"10\").Contains($_)} {\"Order\"}\r\n        };\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDSchema = \"TCDTgt\";\r\n    $TCDTableName = $TestCaseID + \"_TCD_\" + $TestDataSet;\r\n    $ERSchema = \"ERTgt\";\r\n    $KeyColumns = \r\n        switch($TestCase) {\r\n            {(\"1\",\"2\",\"3\",\"4\",\"9\",\"11\").Contains($_)} {\"AccountBK\"}\r\n            {(\"5\",\"6\",\"7\",\"8\",\"10\").Contains($_)} {\"OrderID,ProductID\"}\r\n        };\r\n    $CombinedKey = \r\n        switch($TestCase) {\r\n            {(\"1\",\"2\",\"3\",\"4\",\"9\",\"11\").Contains($_)} {\"r.AccountBK\"}\r\n            {(\"5\",\"6\",\"7\",\"8\",\"10\").Contains($_)} {\"r.OrderID + '-' + r.ProductID\"}\r\n        };\r\n    $ExpectedCol = \r\n        switch ($TestCase) {\r\n            {(\"1\",\"2\",\"3\",\"4\",\"11\").Contains($_)} {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n            {(\"5\",\"6\",\"7\",\"8\").Contains($_)} {\"OrderID,OrderDetailID,ProductID,OrderQty,HasDiscount,TransactionDate\"}\r\n            \"9\" {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator\"}\r\n            \"10\" {\"OrderID,OrderDetailID,ProductID,OrderQty,HasDiscount,StartDate\"}\r\n        };\r\n    $JoinCondition = \r\n        switch($TestCase) {\r\n            {(\"1\",\"2\",\"3\",\"4\",\"9\",\"11\").Contains($_)} {\"s.AccountBK = r.AccountBK\"}\r\n            {(\"5\",\"6\",\"7\",\"8\",\"10\").Contains($_)} {\"s.OrderID = r.OrderID AND s.ProductID = r.ProductID\"}\r\n        };\r\n    $PStgDateCol =\r\n        switch ($TestCase) {\r\n            \"10\" {\"LastModifiedDate\"}\r\n            default {\"LoadDateTime\"}\r\n        }\r\n\r\n    # Snowflake conversion\r\n    If ($sourceDriverType -eq \"Snowflake\") {\r\n        $TCDTableName = $TCDTableName.ToUpper();\r\n        $KeyColumns = $KeyColumns.ToUpper();\r\n        $CombinedKey = $CombinedKey.ToUpper().Replace(\"+\",\"||\");\r\n        $ExpectedCol = $ExpectedCol.ToUpper();\r\n        $JoinCondition = $JoinCondition.ToUpper();\r\n        $PStgDateCol = $PStgDateCol.ToUpper();\r\n    }\r\n\r\n    # Define result reference\r\n    $RefObjectCount = 5;\r\n    $RefKeyCount = \r\n        switch ($TestCase) {\r\n            {(\"1\",\"5\").Contains($_)} {2}\r\n            {(\"2\",\"3\",\"6\",\"7\",\"8\").Contains($_)} {1}\r\n            {(\"9\",\"11\").Contains($_)} {99}\r\n            \"4\" {4}\r\n            \"10\" {3}\r\n        };\r\n    $RefRowCount = \r\n        switch ($TestCase) {\r\n            {(\"1\",\"2\",\"5\",\"6\",\"8\").Contains($_)} {2}\r\n            {(\"3\",\"7\").Contains($_)} {3}\r\n            {(\"9\",\"11\").Contains($_)} {99}\r\n            \"4\" {8}\r\n            \"10\" {6}\r\n        };\r\n    $RefPstgDelCount = \r\n        switch ($TestCase) {\r\n            {(\"1\",\"4\",\"5\",\"8\",\"9\",\"10\",\"11\").Contains($_)} {0}\r\n            {(\"2\",\"3\",\"6\",\"7\").Contains($_)} {1}\r\n        };\r\n    $RefDateMatchedCount =\r\n        switch ($TestCase) {\r\n            {(\"1\",\"5\").Contains($_)} {2}\r\n            {(\"2\",\"6\",\"9\").Contains($_)} {0}\r\n            {(\"3\",\"7\",\"8\").Contains($_)} {1}\r\n            \"4\" {4}\r\n            \"10\" {40}\r\n            \"11\" {99}\r\n        };\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $PStgCheckResult = 0;\r\n    $DateMatchedCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    # Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE '$($TestCaseID + \"_TCD_%\")'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n    \r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n    \r\n    $TableReader.Close();\r\n\r\n    # If cannot find all the tables as expected ($TableCount is not 5), mark an error with table check\r\n    If ($TableCount -ne $RefObjectCount)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        # Attempt to check if Persistent Staging process has generated relevant rows as we expect\r\n        $ReconCheck.CommandText = \r\n            switch ($sourceDriverType) {\r\n                \"Snowflake\" {\"SELECT COUNT(DISTINCT $CombinedKey) AS KEY_COUNT, COUNT(*) AS ROW_COUNT, SUM(CAST(PERSISTDELETED AS integer)) AS DELETE_COUNT FROM \"\"$TCDSchema\"\".$($TCDTableName + \"HISTORY\") s INNER JOIN (SELECT $KeyColumns FROM \"\"$TCDSchema\"\".$($TCDTableName + \"CURRENT\") WHERE STARTDATE = (SELECT MAX(STARTDATE) FROM \"\"$TCDSchema\"\".$($TCDTableName + \"CURRENT\"))) r ON $JoinCondition\"}\r\n                default {\"SELECT COUNT(DISTINCT $CombinedKey) AS KEY_COUNT, COUNT(*) AS ROW_COUNT, SUM(PersistDeleted) AS DELETE_COUNT FROM [$TCDSchema].[$($TCDTableName + \"History\")] s INNER JOIN (SELECT $KeyColumns FROM [$TCDSchema].[$($TCDTableName + \"Current\")] WHERE StartDate = (SELECT MAX(StartDate) FROM [$TCDSchema].[$($TCDTableName + \"Current\")])) r ON $JoinCondition\"}\r\n            };\r\n\r\n        $PStgReader = $ReconCheck.ExecuteReader();\r\n        \r\n        While ($PStgReader.Read()) {\r\n            $KeyCount = $PStgReader[\"KEY_COUNT\"];\r\n            $RowCount = $PStgReader[\"ROW_COUNT\"];\r\n            $PStgDelCount = $PStgReader[\"DELETE_COUNT\"];\r\n        }\r\n        \r\n        $PStgReader.Close();\r\n        \r\n        # Mark persistent staging check to fail if the amount of affected accounts (keys), the amount of generated persistent staging history rows, or the amount of rows marked as PersistentDeleted is not as expected\r\n        If (($KeyCount -ne $RefKeyCount) -or ($RowCount -ne $RefRowCount) -or ($PStgDelCount -ne $RefPstgDelCount)) {\r\n            $PStgCheckResult = 1;\r\n        } else {\r\n            # Attempt to check if DGStartDate in DATA / METADATA table match LoadDateTime in staging tables\r\n            $ReconCheck.CommandText = \r\n                switch ($sourceDriverType) {\r\n                    \"Snowflake\" {\"SELECT COUNT(*) AS DATEMATCHED FROM \"\"$TCDSchema\"\".$TCDTableName s INNER JOIN \"\"DGStg\"\".$TCDTableName r ON $JoinCondition AND s.DGSTARTDATE = r.$PStgDateCol\"}\r\n                    Default {\"SELECT COUNT(*) AS DATEMATCHED FROM $TCDSchema.$TCDTableName s INNER JOIN DGStg.$TCDTableName r ON $JoinCondition AND s.DGStartDate = r.$PStgDateCol\"}\r\n                };\r\n            $DataDateReader = $ReconCheck.ExecuteReader();\r\n        \r\n            $DataDateReader.Read() | Out-Null;\r\n            $DateMatchedCount = $DataDateReader[\"DATEMATCHED\"];\r\n            \r\n            $DataDateReader.Close();\r\n        \r\n            # Mark date matched check to fail if the amount of rows that have DGStartDate in transformed tables matches LoadDateTime from staging tables doesn't meet expectation\r\n            If ($DateMatchedCount -ne $RefDateMatchedCount) {\r\n                $DateMatchedCheckResult = 1;\r\n            } else {\r\n                # Attempt to check if loaded data and status can match expected results\r\n                $ReconCheck.CommandText =\r\n                    switch ($sourceDriverType) {\r\n                        \"Snowflake\" {\"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT $ExpectedCol FROM \"\"$TCDSchema\"\".$($TCDTableName + \"CURRENT\") EXCEPT SELECT $ExpectedCol FROM \"\"$ERSchema\"\".$($TCDTableName.Replace(\"_TCD_\",\"_ER_\"))) SRC\"}\r\n                        Default {\"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT $ExpectedCol FROM [$TCDSchema].[$($TCDTableName + \"Current\")] EXCEPT SELECT $ExpectedCol FROM [$ERSchema].[$($TCDTableName.Replace(\"_TCD_\",\"_ER_\"))]) Src\"}\r\n                    };\r\n                $ResultReconReader = $ReconCheck.ExecuteReader();\r\n                \r\n                $ResultReconReader.Read() | Out-Null;\r\n                $ResultVarianceCount = $ResultReconReader[\"VARIANCECOUNT\"];\r\n                \r\n                $ResultReconReader.Close();\r\n                \r\n                $ReconCheck.CommandText =\r\n                    switch ($sourceDriverType) {\r\n                        \"Snowflake\" {\"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT $ExpectedCol FROM \"\"$ERSchema\"\".$($TCDTableName.Replace(\"_TCD_\",\"_ER_\")) EXCEPT SELECT $ExpectedCol FROM \"\"$TCDSchema\"\".$($TCDTableName + \"CURRENT\")) SRC\"}\r\n                        Default {\"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT $ExpectedCol FROM [$ERSchema].[$($TCDTableName.Replace(\"_TCD_\",\"_ER_\"))] EXCEPT SELECT $ExpectedCol FROM [$TCDSchema].[$($TCDTableName + \"Current\")]) Src\"}\r\n                    };\r\n                $ERReconReader = $ReconCheck.ExecuteReader();\r\n                \r\n                $ERReconReader.Read() | Out-Null;\r\n                $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n                \r\n                $ERReconReader.Close();\r\n                \r\n                # Mark data check to fail if the data or status not meet expectation\r\n                If (($ERVarianceCount -ne 0) -and ($ResultVarianceCount -ne 0)) {\r\n                    $DataCheckResult = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    # Return result from above checks\r\n    $ActualResult = $TableCheckResult + $PStgCheckResult + $DateMatchedCheckResult + $DataCheckResult;\r\n    \r\n    # Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n    \r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n    \r\n    $ResultReader.Close();\r\n    \r\n    # Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Did not find all expected Persistent Staging database objects.\"}\r\n            {($PStgCheckResult -eq 1)} {\"Persistent Staging process did not performed as expected.\"}\r\n            {($DateMatchedCheckResult -eq 1)} {\"Cannot find expected amount of rows that should have DGStartDate in output table matches LoadDatetime in staging table\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n    \r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n# Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "PSTG - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"ADLS_BM\"\r\n$TestDataSet = \"Account\"\r\n$TestCases = @(\"1\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will be used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            Default {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            Default {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            Default {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n            Default {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n        }\r\n    \r\n    #Define expected results reference\r\n    $RefColumnNumber = 6;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n        \r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n            switch ($sourceDriverType)\r\n            {\r\n                \r\n                \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n                Default {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            };    \r\n        \r\n        $ColumnCount = 0;\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n                switch ($sourceDriverType)\r\n                {\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    Default {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n        \r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n        \r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $RefColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -and ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the tranformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "ADLS_BM - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"ABS_BM\"\r\n$TestDataSet = \"Account\"\r\n$TestCases = @(\"1\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will be used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            Default {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        };\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            Default {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        };\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + '\"'}\r\n            Default {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\"}\r\n        };\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Snowflake\" {\"ACCOUNTBK,PARENTACCOUNTBK,ACCOUNTDESCRIPTION,ACCOUNTTYPE,OPERATOR,VALUETYPE\"}\r\n            Default {\"AccountBK,ParentAccountBK,AccountDescription,AccountType,Operator,ValueType\"}\r\n        }\r\n    \r\n    #Define expected results reference\r\n    $RefColumnNumber = 6;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n        \r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \r\n            switch ($sourceDriverType)\r\n            {\r\n                \r\n                \"Snowflake\" {'\"' + ($Columns.Replace(\" \", \"\")).Replace(',', '\",\"') + '\"'}\r\n                Default {\"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\"}\r\n            };    \r\n        \r\n        $ColumnCount = 0;\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = \r\n                switch ($sourceDriverType)\r\n                {\r\n                    \"Snowflake\" {$ColumnVariance.Replace('\"' + $ColumnReader[\"COLUMN_NAME\"] + '\"', '')}\r\n                    Default {$ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\")}\r\n                };            \r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n        \r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n        \r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $RefColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -and ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the tranformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n    \r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "ABS_BM - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"SQS\";\r\n$TestCases = @(\"1\", \"2\", \"3\", \"4\");\r\n$TestDataSet = \"Order\";\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Identify migration target connection type\r\n$GetType = $TCDConn.GetType();\r\n\r\n$sourceDriverType = \r\n    switch ($GetType){\r\n        \"System.Data.SqlClient.SqlConnection\" {\"Microsoft SQL Server\"}\r\n        \"Snowflake.Data.Client.SnowflakeDbConnection\" {\"Snowflake\"}\r\n    };\r\n\r\nForeach ($TestCase in $TestCases)\r\n{\r\n\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase; #eg SQS1\r\n    $TCDTableName = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n            \"Snowflake\" {$TestCaseID + \"_TCD_\" + $TestDataSet.ToUpper()}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {$TestCaseID + \"_TCD_\" + $TestDataSet}\r\n        }; #eg SQS1_TCD_Order / SQS1_TCD_ORDER\r\n    $TCDTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n            \"Snowflake\" {'\"TCDTgt\".\"' + $TCDTableName + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[TCDTgt].[\" + $TCDTableName + \"]\"}\r\n        }; #eg [TCDTgt].[SQS1_TCD_Order] / \"TCDTgt\".\"SQS1_TCD_ORDER\"\r\n    $ERTable = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"SQS1\", \"SQS\").Replace(\"SQS2\", \"SQS\").Replace(\"SQS3\", \"SQS\").Replace(\"SQS4\", \"SQS\") + \"]\"}\r\n            \"Snowflake\" {'\"ERTgt\".\"' + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"SQS1\", \"SQS\").Replace(\"SQS2\", \"SQS\").Replace(\"SQS3\", \"SQS\").Replace(\"SQS4\", \"SQS\") + '\"'}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\").Replace(\"SQS1\", \"SQS\").Replace(\"SQS2\", \"SQS\").Replace(\"SQS3\", \"SQS\").Replace(\"SQS4\", \"SQS\") + \"]\"}\r\n        }; #eg [ERTgt].[SQS_ER_Order] / \"ERTgt\".\"SQS_ER_ORDER\"\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = \r\n        switch ($sourceDriverType)\r\n        {\r\n            \"Microsoft SQL Server\" {\"IdentifyTag,OrderQty,OrderID,OrderDetailID,ProductID,UnitPrice,LineTotal,TransactionDate\"}\r\n            \"Snowflake\" {\"IDENTIFYTAG,ORDERQTY,ORDERID,ORDERDETAILID,PRODUCTID,UNITPRICE,LINETOTAL,TRANSACTIONDATE\"}\r\n            {($_ -ne \"Microsoft SQL Server\") -and ($_ -ne \"Snowflake\")} {\"IdentifyTag,OrderQty,OrderID,OrderDetailID,ProductID,UnitPrice,LineTotal,TransactionDate\"}\r\n        }\r\n    $ColumnNumber = 8;\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n\r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TABLECOUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TABLECOUNT\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"' AND (UPPER(COLUMN_NAME) NOT LIKE 'TASKEXECUTIONID%' AND UPPER(COLUMN_NAME) NOT LIKE 'LOADDATETIME%')\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        #Will check if all expected columns were migrated to TCD Table and there's no unexpected columns as well\r\n        $ColumnVariance = \"'\" + ($Columns.Replace(\" \", \"\")).Replace(\",\", \"','\") + \"'\";\r\n        $ColumnCount = 0;\r\n\r\n        While ($ColumnReader.Read()) {\r\n            #Remove from list of expected columns if column is found in the TCD table to check if all expected columns were migrated (targeting empty string in the end)\r\n            $ColumnVariance = $ColumnVariance.Replace(\"'\" + $ColumnReader[\"COLUMN_NAME\"] + \"'\", \"\");\r\n            #Count column number to check is there any unexpected column\r\n            $ColumnCount += 1; \r\n        }\r\n\r\n        #Tidy up column list and remove delimiter in the string\r\n        $ColumnVariance = $ColumnVariance.Replace(\",\", \"\");\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVariance -ne \"\" -or $ColumnCount -ne $ColumnNumber) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n    \r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VARIANCECOUNT\"];\r\n    \r\n            $ERReconReader.Close();\r\n    \r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VARIANCECOUNT FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n    \r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VARIANCECOUNT\"];\r\n    \r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "SQS - Reconcile with Expected Results",
      "ProjectId": 8,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 2,
      "Agent": {
        "AgentId": 2,
        "AgentName": "PerPrd-WEB01.bizdata.local",
        "HostName": "PerPrd-WEB01.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    }
  ],
  "JobSequences": [
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 1,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "BM - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 2,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "IM - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 3,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "AM - Reconcile Detect Mode Result",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 4,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "QM - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 5,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "QIM - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 6,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "NS_SS - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 7,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "NS_TS - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 8,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "NS_T - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 9,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "FM_I - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 13,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "SQS - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 10,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "PSTG - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 11,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "ADLS_BM - Reconcile with Expected Results",
      "Connection": null
    },
    {
      "JobName": "03. Reconcile Result - Generic",
      "RunSequence": 12,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "ABS_BM - Reconcile with Expected Results",
      "Connection": null
    }
  ],
  "JobSequenceDependencies": [],
  "JobDependencies": []
}