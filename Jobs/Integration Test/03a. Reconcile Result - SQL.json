{
  "ProjectId": 17,
  "ProjectName": "Integration Test",
  "JobName": "03a. Reconcile Result - SQL",
  "Logging": 0,
  "LogBatchSize": 5,
  "CancelJobFlag": false,
  "LoggingType": null,
  "Tasks": [
    {
      "JobName": "03a. Reconcile Result - SQL",
      "TaskContent": "IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name = N'TCDTgt') EXEC('CREATE SCHEMA [TCDTgt] AUTHORIZATION [dbo]');\r\nDROP TABLE IF EXISTS [TCDTgt].[DT1_TCD_AllNumberTypes_Metadata];\r\nDROP TABLE IF EXISTS [TCDTgt].[DT2_TCD_AllDatetimeTypes_Metadata];\r\nDROP TABLE IF EXISTS [TCDTgt].[DT3_TCD_AllOtherTypes_Metadata];\r\n\r\nSELECT s.name AS SchemaName\r\n\t,t.name AS TableName\r\n\t,c.name AS ColumnName\r\n\t,UPPER(st.name)\r\n\t\t+ CASE WHEN st.name IN ('char','varchar','binary','varbinary') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('nchar','nvarchar') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length / 2 AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('decimal','numeric') THEN '(' + CAST(c.precision AS VARCHAR) + ',' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tWHEN st.name IN ('datetime2') THEN '(' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nINTO [TCDTgt].[DT1_TCD_AllNumberTypes_Metadata]\r\nFROM sys.schemas s\r\nJOIN sys.tables t ON s.schema_id = t.schema_id\r\nJOIN sys.columns c ON t.object_id = c.object_id\r\nJOIN sys.types st ON c.user_type_id = st.user_type_id AND c.system_type_id = st.system_type_id\r\nWHERE s.name = 'TCDTgt'\r\nAND t.name = 'DT1_TCD_AllNumberTypes'\r\nAND c.name NOT IN ('code','name','TaskExecutionID','LoadDateTime');\r\n\r\nSELECT s.name AS SchemaName\r\n\t,t.name AS TableName\r\n\t,c.name AS ColumnName\r\n\t,UPPER(st.name)\r\n\t\t+ CASE WHEN st.name IN ('char','varchar','binary','varbinary') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('nchar','nvarchar') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length / 2 AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('decimal','numeric') THEN '(' + CAST(c.precision AS VARCHAR) + ',' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tWHEN st.name IN ('datetime2') THEN '(' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nINTO [TCDTgt].[DT2_TCD_AllDatetimeTypes_Metadata]\r\nFROM sys.schemas s\r\nJOIN sys.tables t ON s.schema_id = t.schema_id\r\nJOIN sys.columns c ON t.object_id = c.object_id\r\nJOIN sys.types st ON c.user_type_id = st.user_type_id AND c.system_type_id = st.system_type_id\r\nWHERE s.name = 'TCDTgt'\r\nAND t.name = 'DT2_TCD_AllDatetimeTypes'\r\nAND c.name NOT IN ('code','name','TaskExecutionID','LoadDateTime');\r\n\r\nSELECT s.name AS SchemaName\r\n\t,t.name AS TableName\r\n\t,c.name AS ColumnName\r\n\t,UPPER(st.name)\r\n\t\t+ CASE WHEN st.name IN ('char','varchar','binary','varbinary') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('nchar','nvarchar') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length / 2 AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('decimal','numeric') THEN '(' + CAST(c.precision AS VARCHAR) + ',' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tWHEN st.name IN ('datetime2') THEN '(' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nINTO [TCDTgt].[DT3_TCD_AllOtherTypes_Metadata]\r\nFROM sys.schemas s\r\nJOIN sys.tables t ON s.schema_id = t.schema_id\r\nJOIN sys.columns c ON t.object_id = c.object_id\r\nJOIN sys.types st ON c.user_type_id = st.user_type_id AND c.system_type_id = st.system_type_id\r\nWHERE s.name = 'TCDTgt'\r\nAND t.name = 'DT3_TCD_AllOtherTypes'\r\nAND c.name NOT IN ('code','name','TaskExecutionID','LoadDateTime');",
      "TaskName": "DT - Obtain Metadata for Transformed Case Data - SQL",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "SQL Statement",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": null,
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03a. Reconcile Result - SQL",
      "TaskContent": "IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name = N'ERTgt') EXEC('CREATE SCHEMA [ERTgt] AUTHORIZATION [dbo]');\r\nDROP TABLE IF EXISTS [ERTgt].[DT1_ER_AllNumberTypes_Metadata];\r\nDROP TABLE IF EXISTS [ERTgt].[DT2_ER_AllDatetimeTypes_Metadata];\r\nDROP TABLE IF EXISTS [ERTgt].[DT3_ER_AllOtherTypes_Metadata];\r\n\r\nSELECT s.name AS SchemaName\r\n\t,t.name AS TableName\r\n\t,c.name AS ColumnName\r\n\t,REPLACE(UPPER(st.name), 'NUMERIC', 'DECIMAL')\r\n\t\t+ CASE WHEN st.name IN ('char','varchar','binary','varbinary') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('nchar','nvarchar') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length / 2 AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('decimal','numeric') THEN '(' + CAST(c.precision AS VARCHAR) + ',' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tWHEN st.name IN ('datetime2') THEN '(' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nINTO [ERTgt].[DT1_ER_AllNumberTypes_Metadata]\r\nFROM sys.schemas s\r\nJOIN sys.tables t ON s.schema_id = t.schema_id\r\nJOIN sys.columns c ON t.object_id = c.object_id\r\nJOIN sys.types st ON c.user_type_id = st.user_type_id AND c.system_type_id = st.system_type_id\r\nWHERE s.name = 'ERTgt'\r\nAND t.name = 'DT1_ER_AllNumberTypes'\r\nAND c.name NOT IN ('code','name');\r\n\r\nSELECT s.name AS SchemaName\r\n\t,t.name AS TableName\r\n\t,c.name AS ColumnName\r\n\t,REPLACE(UPPER(st.name), 'TIMESTAMP', 'BINARY(8)')\r\n\t\t+ CASE WHEN st.name IN ('char','varchar','binary','varbinary') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('nchar','nvarchar') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length / 2 AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('decimal','numeric') THEN '(' + CAST(c.precision AS VARCHAR) + ',' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tWHEN st.name IN ('datetime2') THEN '(' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nINTO [ERTgt].[DT2_ER_AllDatetimeTypes_Metadata]\r\nFROM sys.schemas s\r\nJOIN sys.tables t ON s.schema_id = t.schema_id\r\nJOIN sys.columns c ON t.object_id = c.object_id\r\nJOIN sys.types st ON c.user_type_id = st.user_type_id AND c.system_type_id = st.system_type_id\r\nWHERE s.name = 'ERTgt'\r\nAND t.name = 'DT2_ER_AllDatetimeTypes'\r\nAND c.name NOT IN ('code','name');\r\n\r\nSELECT s.name AS SchemaName\r\n\t,t.name AS TableName\r\n\t,c.name AS ColumnName\r\n\t,CASE UPPER(st.name) WHEN 'IMAGE' THEN 'VARBINARY(MAX)' WHEN 'SYSNAME' THEN 'NVARCHAR(128)' ELSE UPPER(st.name) END\r\n\t\t+ CASE WHEN st.name IN ('char','varchar','binary','varbinary') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('nchar','nvarchar') THEN '(' + IIF(c.max_length = -1,'MAX',CAST(c.max_length / 2 AS VARCHAR)) + ')'\r\n\t\t\tWHEN st.name IN ('decimal','numeric') THEN '(' + CAST(c.precision AS VARCHAR) + ',' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tWHEN st.name IN ('datetime2') THEN '(' + CAST(c.scale AS VARCHAR) + ')'\r\n\t\t\tELSE ''\r\n\t\tEND AS DataType\r\nINTO [ERTgt].[DT3_ER_AllOtherTypes_Metadata]\r\nFROM sys.schemas s\r\nJOIN sys.tables t ON s.schema_id = t.schema_id\r\nJOIN sys.columns c ON t.object_id = c.object_id\r\nJOIN sys.types st ON c.user_type_id = st.user_type_id AND c.system_type_id = st.system_type_id\r\nWHERE s.name = 'ERTgt'\r\nAND t.name = 'DT3_ER_AllOtherTypes'\r\nAND c.name NOT IN ('code','name');",
      "TaskName": "DT - Obtain Metadata for Expected Results - SQL",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "SQL Statement",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": null,
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    },
    {
      "JobName": "03a. Reconcile Result - SQL",
      "TaskContent": "#Define test case variables\r\n$TestCaseGroup = \"DT\"\r\n$TestCases = @(\"1\", \"2\", \"3\")\r\n\r\n#Establish database connection to test target\r\n$TCDConn = $SourceConnection.CreateOpenConnection();\r\n$ReconCheck = $TCDConn.CreateCommand();\r\n\r\n#Establish database connection to execution log\r\n$LogConn = $TargetConnection.CreateOpenConnection();\r\n$LogOutput = $LogConn.CreateCommand();\r\n\r\n#Start to loop through expected test cases defined previously and check test results\r\nForeach ($TestCase in $TestCases) {\r\n    #Define variables that will used when checking results\r\n    $TestCaseID = $TestCaseGroup + $TestCase;\r\n    $TestDataSet = switch ($TestCaseID) {\r\n        \"DT1\" {\"AllNumberTypes\"}\r\n        \"DT2\" {\"AllDatetimeTypes\"}\r\n        \"DT3\" {\"AllOtherTypes\"}\r\n    }\r\n    $TCDTableName = $TestCaseID + \"_TCD_\" + $TestDataSet;\r\n    $TCDTable = \"[TCDTgt].[\" + $TCDTableName + \"]\";\r\n    $ERTable = \"[ERTgt].[\" + $TCDTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\";\r\n    $TCDColumns = \"\";\r\n\r\n    #Define expected columns for each test case, will be vary depends on test cases\r\n    $Columns = switch ($TestCaseID)\r\n        {\r\n            \"DT1\" {\"colbit,coltinyint,colsmallint,colint,colbigint,colsmallmoney,colmoney,coldecimal,colnumeric,colfloat,colreal\"}\r\n            \"DT2\" {\"coldate,coltime,colsmalldatetime,coldatetime,coldatetime2,coldatetimeoffset\"}  #coltimestamp is automatically generated value, will not expect it to be matched\r\n            \"DT3\" {\"colchar,colnchar,colvarchar,colnvarchar,colbinary,colvarbinary,colguid,colsql_variant,colsysname,colhierarchyid\"}  #coltext,colntext,colimage,colgeography,colgeometry,colxml are not compatible with EXCEPT and = operator, cannot be compared\r\n        };\r\n    $ColumnNumber = switch ($TestCaseID)\r\n        {\r\n            \"DT1\" {11}\r\n            \"DT2\" {7}\r\n            \"DT3\" {16}\r\n        };\r\n\r\n    #Default check result variables to 0\r\n    $TableCheckResult = 0;\r\n    $ColumnCheckResult = 0;\r\n    $DataCheckResult = 0;\r\n        \r\n    #Check if transformed case data has been generated in target\r\n    $ReconCheck.CommandText = \"SELECT COUNT(TABLE_NAME) AS TableCount FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'TCDTgt' AND TABLE_NAME = '\" + $TCDTableName + \"'\";\r\n    $TableReader = $ReconCheck.ExecuteReader();\r\n\r\n    $TableReader.Read() | Out-Null;\r\n    $TableCount = $TableReader[\"TableCount\"];\r\n\r\n    $TableReader.Close();\r\n\r\n    #If cannot find the table ($TableCount is 0), mark an error with table check\r\n    If ($TableCount -ne 1)\r\n    {\r\n        $TableCheckResult = 1;\r\n    } else {\r\n        $MetadataTableName = $TCDTableName + \"_Metadata\";\r\n        $ERMetadataTable = \"[TCDTgt].[\" + $MetadataTableName + \"]\";\r\n        $TCDMetadataTable = \"[ERTgt].[\" + $MetadataTableName.Replace(\"_TCD_\", \"_ER_\") + \"]\";\r\n\r\n        #Check if columns from table of transformed case data meet expectation\r\n        $ReconCheck.CommandText = \"SELECT SUM(CASE WHEN er.DataType = tcd.DataType THEN 0 ELSE 1 END) AS ColumnVarianceCount FROM $ERMetadataTable er FULL JOIN $TCDMetadataTable tcd ON er.ColumnName = tcd.ColumnName\";\r\n        $ColumnReader = $ReconCheck.ExecuteReader();\r\n\r\n        $ColumnReader.Read() | Out-Null;\r\n        $ColumnVarianceCount = $ColumnReader[\"ColumnVarianceCount\"]\r\n\r\n        $ColumnReader.Close();\r\n\r\n        #Compare obtained columns to expected columns, mark an error with column check if they are not matched\r\n        If ($ColumnVarianceCount -ne 0) {\r\n            $ColumnCheckResult = 1;\r\n        } else {\r\n            #Check if the transformed case data can fully match the expected result\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VarianceCount FROM (SELECT \" + $Columns + \" FROM \" + $ERTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $TCDTable + \") Src\";\r\n            $ERReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $ERReconReader.Read() | Out-Null;\r\n            $ERVarianceCount = $ERReconReader[\"VarianceCount\"];\r\n\r\n            $ERReconReader.Close();\r\n\r\n            $ReconCheck.CommandText = \"SELECT COUNT(*) AS VarianceCount FROM (SELECT \" + $Columns + \" FROM \" + $TCDTable + \" EXCEPT SELECT \" + $Columns + \" FROM \" + $ERTable + \") Src\";\r\n            $TCDReconReader = $ReconCheck.ExecuteReader();\r\n\r\n            $TCDReconReader.Read() | Out-Null;\r\n            $TCDVarianceCount = $TCDReconReader[\"VarianceCount\"];\r\n\r\n            $TCDReconReader.Close();\r\n\r\n            #Compare data between transformed case data and expected result, mark an error with data check if found any variance\r\n            If (($ERVarianceCount -ne 0) -or ($TCDVarianceCount -ne 0)) {\r\n                $DataCheckResult = 1;\r\n            }\r\n        } \r\n    }\r\n\r\n    #Return result from above checks\r\n    $ActualResult = $TableCheckResult + $ColumnCheckResult + $DataCheckResult;\r\n\r\n    #Obtain designed result from test case reference\r\n    $LogOutput.CommandText = \"SELECT DesignedResult FROM dbo.TestCaseReference WHERE TestCaseID = '$TestCaseID'\";\r\n    $ResultReader = $LogOutput.ExecuteReader();\r\n\r\n    $ResultReader.Read() | Out-Null;\r\n    $DesignedResult = $ResultReader[\"DesignedResult\"];\r\n\r\n    $ResultReader.Close();\r\n\r\n    #Compare actual result to designed result, output the test result and error description (if any)\r\n    If ($ActualResult -eq $DesignedResult) {\r\n        $TestResult = \"Pass\";\r\n        $ErrorDesc = \"\";\r\n    } else {\r\n        $TestResult = \"Fail\";\r\n        $ErrorDesc = switch ($true) {\r\n            {($TableCheckResult -eq 1)} {\"Cannot find the transformed table $TCDTable.\"}\r\n            {($ColumnCheckResult -eq 1)} {\"Columns found in the transformed table $TCDTable does not meet expectation.\"}\r\n            {($DataCheckResult -eq 1)} {\"Found variance on data compare to the Expected Result data set.\"}\r\n        };\r\n    }\r\n\r\n    #Output execution result to log\r\n    $ExecutionDatetime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    $LogOutput.CommandText = \"INSERT INTO [dbo].[ExecutionLog] (ExecutionDatetime, TargetConnection, TestCaseID, TestResult, ErrorDescription) VALUES (CAST('\" + $ExecutionDatetime + \"' AS datetime), '\" + $SourceConnection.Options.ConnectionId + \"', '\" + $TestCaseID + \"', '\" + $TestResult + \"', '\" + $ErrorDesc + \"')\";\r\n    $LogOutput.ExecuteNonQuery();\r\n}\r\n\r\n#Close database connection\r\n$TCDConn.Close();\r\n$LogConn.Close();",
      "TaskName": "DT - Reconcile with Expected Results - SQL",
      "ProjectId": 17,
      "ProjectName": null,
      "TaskTypeName": "PowerShell Core",
      "Logging": 1,
      "LastEndPoint": null,
      "PendingEndPoint": null,
      "ParameterNames": "",
      "ParameterDefaults": "",
      "SourceSchema": null,
      "TargetSchema": null,
      "SourceConnectionName": "SQL Server Target",
      "TargetConnectionName": "Regression Test Logging",
      "SourceFileName": null,
      "TargetFileName": null,
      "SourceClusterName": null,
      "TargetClusterName": null,
      "SourceFileId": null,
      "TargetFileId": null,
      "MaxThreads": 4,
      "ParallelDm": true,
      "PythonEnvironmentName": null,
      "RunWithAgentId": 1,
      "Agent": {
        "AgentId": 1,
        "AgentName": "BIZDATA-8T24Q13.bizdata.local",
        "HostName": "BIZDATA-8T24Q13.bizdata.local",
        "DateCreated": "0001-01-01T00:00:00",
        "DateUpdated": "0001-01-01T00:00:00",
        "HeartBeat": "0001-01-01T00:00:00",
        "Version": null,
        "TaskQueues": null,
        "ConnectionId": null,
        "IsHealthy": false
      },
      "PythonEnvironment": null,
      "SourceConnection": null,
      "TargetConnection": null,
      "SourceCluster": null,
      "TargetCluster": null,
      "LoggingType": null,
      "TaskType": null,
      "TaskTable": [],
      "TaskConnections": []
    }
  ],
  "JobSequences": [
    {
      "JobName": "03a. Reconcile Result - SQL",
      "RunSequence": 1,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "DT - Obtain Metadata for Transformed Case Data - SQL",
      "Connection": null
    },
    {
      "JobName": "03a. Reconcile Result - SQL",
      "RunSequence": 2,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "DT - Obtain Metadata for Expected Results - SQL",
      "Connection": null
    },
    {
      "JobName": "03a. Reconcile Result - SQL",
      "RunSequence": 3,
      "ParallelSequence": 0,
      "ParameterValues": null,
      "ConnectionId": null,
      "Active": true,
      "TaskName": "DT - Reconcile with Expected Results - SQL",
      "Connection": null
    }
  ],
  "JobSequenceDependencies": [
    {
      "JobName": "03a. Reconcile Result - SQL",
      "ProjectName": "Integration Test",
      "TaskName": "DT - Reconcile with Expected Results - SQL",
      "TaskRunSequence": 3,
      "PredecessorTaskName": "DT - Obtain Metadata for Expected Results - SQL",
      "PredecessorTaskRunSequence": 2
    },
    {
      "JobName": "03a. Reconcile Result - SQL",
      "ProjectName": "Integration Test",
      "TaskName": "DT - Reconcile with Expected Results - SQL",
      "TaskRunSequence": 3,
      "PredecessorTaskName": "DT - Obtain Metadata for Transformed Case Data - SQL",
      "PredecessorTaskRunSequence": 1
    }
  ],
  "JobDependencies": []
}